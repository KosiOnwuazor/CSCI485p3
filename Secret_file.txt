#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/aes.h>

#define AES_BLOCK_SIZE 16

// Function to read the contents of a file into a buffer
unsigned char* read_file(const char *file_path, size_t *file_size) {
    FILE *file = fopen(file_path, "rb");
    if (!file) {
        perror("Error opening file");
        return NULL;
    }

    fseek(file, 0, SEEK_END);
    *file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    unsigned char *buffer = (unsigned char*)malloc(*file_size);
    if (!buffer) {
        fclose(file);
        perror("Memory allocation error");
        return NULL;
    }

    fread(buffer, 1, *file_size, file);
    fclose(file);

    return buffer;
}

// Function to decrypt using AES
int aes_decrypt(const unsigned char *ciphertext, size_t ciphertext_len,
                const unsigned char *key, unsigned char *plaintext) {
    AES_KEY decrypt_key;
    if (AES_set_decrypt_key(key, 128, &decrypt_key) < 0) {
        fprintf(stderr, "AES key initialization failed\n");
        return -1;
    }

    // Decrypt in chunks of AES_BLOCK_SIZE
    for (int i = 0; i < ciphertext_len; i += AES_BLOCK_SIZE) {
        AES_decrypt(&ciphertext[i], &plaintext[i], &decrypt_key);
    }

    return 0;
}

int main() {
    const char *secret_file_path = "secret_file.txt";
    const char *special_file_path = "special_file.txt";

    // Read secret key from secret_file.txt
    size_t key_size;
    unsigned char *key = read_file(secret_file_path, &key_size);
    if (!key) {
        fprintf(stderr, "Error reading secret key\n");
        return 1;
    }

    // Read ciphertext from special_file.txt
    size_t ciphertext_size;
    unsigned char *ciphertext = read_file(special_file_path, &ciphertext_size);
    if (!ciphertext) {
        fprintf(stderr, "Error reading ciphertext\n");
        free(key);
        return 1;
    }

    // Allocate memory for plaintext
    unsigned char *plaintext = (unsigned char*)malloc(ciphertext_size);
    if (!plaintext) {
        fprintf(stderr, "Memory allocation error\n");
        free(key);
        free(ciphertext);
        return 1;
    }

    // Decrypt ciphertext
    if (aes_decrypt(ciphertext, ciphertext_size, key, plaintext) < 0) {
        fprintf(stderr, "Decryption failed\n");
        free(key);
        free(ciphertext);
        free(plaintext);
        return 1;
    }

    // Print decrypted plaintext
    printf("Decrypted text:\n%s\n", plaintext);

    // Free allocated memory
    free(key);
    free(ciphertext);
    free(plaintext);

    return 0;
}
